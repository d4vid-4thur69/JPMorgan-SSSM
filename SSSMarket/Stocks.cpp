#include "Stocks.h"

#include <cmath>
#include <iostream>

///////////////////////////////////////////////////////////////////////////////
//
//  constructor
//
///////////////////////////////////////////////////////////////////////////////
Stocks::Stocks(string symbol, StockType type, int ldividend, int fdividend, int pvalue)
{
	_symbol=symbol;
	_stock_type=type;
	_last_dividend=ldividend;
	_fixed_dividend=fdividend;
	_par_value=pvalue;
}

///////////////////////////////////////////////////////////////////////////////
//
//  Return stock symbol
//
///////////////////////////////////////////////////////////////////////////////
string Stocks::GetSymbol(void) const
{
	return _symbol;
}

///////////////////////////////////////////////////////////////////////////////
//
//  Return stock type
//
///////////////////////////////////////////////////////////////////////////////
Stocks::StockType Stocks::GetType(void) const
{
	return _stock_type;
}

int Stocks::GetLastDividend(void) const
{
	return _last_dividend;
}

///////////////////////////////////////////////////////////////////////////////
//
//  Return stock fixed dividend
//
///////////////////////////////////////////////////////////////////////////////
int Stocks::GetFixedDividend(void) const
{
	return _fixed_dividend;
}

///////////////////////////////////////////////////////////////////////////////
//
//  Return stock par value
//
///////////////////////////////////////////////////////////////////////////////
int Stocks::GetParValue(void) const
{
	return _par_value;
}

///////////////////////////////////////////////////////////////////////////////
//
//  Two calculation for dividend yield
//
///////////////////////////////////////////////////////////////////////////////
double Stocks::CalculateDividendYield(int price)
{
	double dy = 0.0;

	// Price cannot be zero, others assume can be any positive value
	if(price>0 &&_last_dividend>-1 &&_fixed_dividend>-1 && _par_value>-1)
	{
		switch(_stock_type)
		{
			case COMMON: dy = (double)_last_dividend/price; break;
			case PREFERRED:
				dy = (double)_fixed_dividend/100;
				dy  =(double)dy*_par_value;
				dy = (double)dy/price;
				break;
			default: break;
		}
	}

	return dy;
}

///////////////////////////////////////////////////////////////////////////////
//
//  Return PE ratio
//
///////////////////////////////////////////////////////////////////////////////
double Stocks::CalculatePERatio(int price)
{
	double pe = 0.0;

	if(price>-1 &&_last_dividend>0 )
	{
		pe = price/_last_dividend;
	}

	return pe;
}

